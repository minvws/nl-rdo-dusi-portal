name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags: [ v* ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 18  
  PHP_VERSION: 8.2

jobs:
  validate:
    name: 'Build & validate'
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        directory: ["bridge", "shared", "user-admin-api", "subsidy-admin-api", "application-backend", "application-api", "assessment-api"]
    defaults:
      run:
        working-directory: ${{ matrix.directory }}
    services:
      postgres-1:
        image: postgres:12.5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: portal_backend_testing
        ports:
          - 54322:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      postgres-2:
        image: postgres:12.5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: user_testing
        ports:
          - 54323:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: zip, pcov, xdebug, pgsql
          coverage: pcov
          tools: cs2pr
      
      - name: Copy .env
        if: ${{ matrix.directory != 'shared' && matrix.directory != 'bridge' }}
        continue-on-error: true
        run: cp -n .env.example .env

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.directory }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-${{ matrix.directory }}-composer-

      - name: Install Dependencies
        env:
          COMPOSER_AUTH: '{"github-oauth": {"github.com": "${{ secrets.REPO_READ_ONLY_TOKEN }}"}}'
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      
      - name: Generate key
        if: ${{ matrix.directory != 'shared' && matrix.directory != 'bridge' }}
        run: php artisan key:generate

      - name: Generate _ide_helper file
        if: ${{ matrix.directory != 'shared' && matrix.directory != 'bridge' }}
        run: php artisan ide-helper:generate

      - name: Static analysis with Psalm
        if: ${{ matrix.directory != 'shared' && matrix.directory != 'bridge' }}
        run: vendor/bin/psalm --output-format=github
      
      - name: Coding style PSR12 Check
        run: vendor/bin/phpcs -q --report=checkstyle | cs2pr

      - name: Static analysis with PHPStan
        run: vendor/bin/phpstan analyse

      - name: Mess detection
        if: ${{ matrix.directory != 'shared' && matrix.directory != 'bridge' }}
        run: vendor/bin/phpmd app/ text ruleset.phpmd.xml

      - name: Mess detection
        if: ${{ matrix.directory == 'shared' || matrix.directory == 'bridge' }}
        run: vendor/bin/phpmd src/ text ruleset.phpmd.xml
      
      - name: Check for known CVE vulnerabilities 
        if: ${{ matrix.directory != 'shared' && matrix.directory != 'bridge' }}
        run: php artisan security-check:now

      - name: Generate Public Key
        run: |
          mkdir -p 'secrets'
          openssl genpkey -algorithm RSA -out 'secrets/private.key'
          openssl rsa -pubout -in 'secrets/private.key' -out 'secrets/public.key'

      - name: Execute tests with Code Coverage
        if: ${{ matrix.directory != 'bridge'}}
        env:
          DB_APPLICATION_HOST: localhost
          DB_APPLICATION_DATABASE: portal_backend_testing
          DB_APPLICATION_PORT: 54322
          DB_APPLICATION_USERNAME: postgres
          DB_APPLICATION_PASSWORD: password
          DB_APPLICATION_SSLMODE: prefer
          DB_USER_HOST: localhost
          DB_USER_DATABASE: user_testing
          DB_USER_PORT: 54323
          DB_USER_USERNAME: postgres
          DB_USER_PASSWORD: password
          DB_USER_SSLMODE: prefer
        run: vendor/bin/phpunit --log-junit=phpunit-${{ matrix.directory }}.xml --coverage-clover=coverage-${{ matrix.directory }}.xml

      - name: Upload test results
        if: ${{ matrix.directory != 'bridge'}}
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.directory }}
          path: |
            ${{ matrix.directory }}/phpunit-*.xml
            ${{ matrix.directory }}/coverage-*.xml

  sonar:
    name: SonarCloud
    runs-on: ubuntu-22.04
    needs: validate
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          path: test-results
          merge-multiple: true
          
      - name: Run SonarCloud scanner
        uses: minvws/nl-irealisatie-generic-pipelines/.github/actions/sonarcloud@main
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}